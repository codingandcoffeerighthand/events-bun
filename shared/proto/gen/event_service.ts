/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.27.1
 * source: shared/proto/event_service.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export class EventInfo extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        id?: string;
        title?: string;
        description?: string;
        start_date?: string;
        end_date?: string;
        location?: string;
        organizer?: string;
        attendees?: string[];
        active?: boolean;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [8], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("title" in data && data.title != undefined) {
                this.title = data.title;
            }
            if ("description" in data && data.description != undefined) {
                this.description = data.description;
            }
            if ("start_date" in data && data.start_date != undefined) {
                this.start_date = data.start_date;
            }
            if ("end_date" in data && data.end_date != undefined) {
                this.end_date = data.end_date;
            }
            if ("location" in data && data.location != undefined) {
                this.location = data.location;
            }
            if ("organizer" in data && data.organizer != undefined) {
                this.organizer = data.organizer;
            }
            if ("attendees" in data && data.attendees != undefined) {
                this.attendees = data.attendees;
            }
            if ("active" in data && data.active != undefined) {
                this.active = data.active;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get title() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set title(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get description() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set description(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get start_date() {
        return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
    }
    set start_date(value: string) {
        pb_1.Message.setField(this, 4, value);
    }
    get end_date() {
        return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
    }
    set end_date(value: string) {
        pb_1.Message.setField(this, 5, value);
    }
    get location() {
        return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
    }
    set location(value: string) {
        pb_1.Message.setField(this, 6, value);
    }
    get organizer() {
        return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
    }
    set organizer(value: string) {
        pb_1.Message.setField(this, 7, value);
    }
    get attendees() {
        return pb_1.Message.getFieldWithDefault(this, 8, []) as string[];
    }
    set attendees(value: string[]) {
        pb_1.Message.setField(this, 8, value);
    }
    get active() {
        return pb_1.Message.getFieldWithDefault(this, 9, false) as boolean;
    }
    set active(value: boolean) {
        pb_1.Message.setField(this, 9, value);
    }
    static fromObject(data: {
        id?: string;
        title?: string;
        description?: string;
        start_date?: string;
        end_date?: string;
        location?: string;
        organizer?: string;
        attendees?: string[];
        active?: boolean;
    }): EventInfo {
        const message = new EventInfo({});
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.title != null) {
            message.title = data.title;
        }
        if (data.description != null) {
            message.description = data.description;
        }
        if (data.start_date != null) {
            message.start_date = data.start_date;
        }
        if (data.end_date != null) {
            message.end_date = data.end_date;
        }
        if (data.location != null) {
            message.location = data.location;
        }
        if (data.organizer != null) {
            message.organizer = data.organizer;
        }
        if (data.attendees != null) {
            message.attendees = data.attendees;
        }
        if (data.active != null) {
            message.active = data.active;
        }
        return message;
    }
    toObject() {
        const data: {
            id?: string;
            title?: string;
            description?: string;
            start_date?: string;
            end_date?: string;
            location?: string;
            organizer?: string;
            attendees?: string[];
            active?: boolean;
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.title != null) {
            data.title = this.title;
        }
        if (this.description != null) {
            data.description = this.description;
        }
        if (this.start_date != null) {
            data.start_date = this.start_date;
        }
        if (this.end_date != null) {
            data.end_date = this.end_date;
        }
        if (this.location != null) {
            data.location = this.location;
        }
        if (this.organizer != null) {
            data.organizer = this.organizer;
        }
        if (this.attendees != null) {
            data.attendees = this.attendees;
        }
        if (this.active != null) {
            data.active = this.active;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id.length)
            writer.writeString(1, this.id);
        if (this.title.length)
            writer.writeString(2, this.title);
        if (this.description.length)
            writer.writeString(3, this.description);
        if (this.start_date.length)
            writer.writeString(4, this.start_date);
        if (this.end_date.length)
            writer.writeString(5, this.end_date);
        if (this.location.length)
            writer.writeString(6, this.location);
        if (this.organizer.length)
            writer.writeString(7, this.organizer);
        if (this.attendees.length)
            writer.writeRepeatedString(8, this.attendees);
        if (this.active != false)
            writer.writeBool(9, this.active);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EventInfo {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EventInfo();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readString();
                    break;
                case 2:
                    message.title = reader.readString();
                    break;
                case 3:
                    message.description = reader.readString();
                    break;
                case 4:
                    message.start_date = reader.readString();
                    break;
                case 5:
                    message.end_date = reader.readString();
                    break;
                case 6:
                    message.location = reader.readString();
                    break;
                case 7:
                    message.organizer = reader.readString();
                    break;
                case 8:
                    pb_1.Message.addToRepeatedField(message, 8, reader.readString());
                    break;
                case 9:
                    message.active = reader.readBool();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): EventInfo {
        return EventInfo.deserialize(bytes);
    }
}
export class CreateEventRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        title?: string;
        description?: string;
        start_date?: string;
        end_date?: string;
        location?: string;
        organizer?: string;
        attendees?: string[];
        active?: boolean;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [7], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("title" in data && data.title != undefined) {
                this.title = data.title;
            }
            if ("description" in data && data.description != undefined) {
                this.description = data.description;
            }
            if ("start_date" in data && data.start_date != undefined) {
                this.start_date = data.start_date;
            }
            if ("end_date" in data && data.end_date != undefined) {
                this.end_date = data.end_date;
            }
            if ("location" in data && data.location != undefined) {
                this.location = data.location;
            }
            if ("organizer" in data && data.organizer != undefined) {
                this.organizer = data.organizer;
            }
            if ("attendees" in data && data.attendees != undefined) {
                this.attendees = data.attendees;
            }
            if ("active" in data && data.active != undefined) {
                this.active = data.active;
            }
        }
    }
    get title() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set title(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get description() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set description(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get start_date() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set start_date(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get end_date() {
        return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
    }
    set end_date(value: string) {
        pb_1.Message.setField(this, 4, value);
    }
    get location() {
        return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
    }
    set location(value: string) {
        pb_1.Message.setField(this, 5, value);
    }
    get organizer() {
        return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
    }
    set organizer(value: string) {
        pb_1.Message.setField(this, 6, value);
    }
    get attendees() {
        return pb_1.Message.getFieldWithDefault(this, 7, []) as string[];
    }
    set attendees(value: string[]) {
        pb_1.Message.setField(this, 7, value);
    }
    get active() {
        return pb_1.Message.getFieldWithDefault(this, 8, false) as boolean;
    }
    set active(value: boolean) {
        pb_1.Message.setField(this, 8, value);
    }
    static fromObject(data: {
        title?: string;
        description?: string;
        start_date?: string;
        end_date?: string;
        location?: string;
        organizer?: string;
        attendees?: string[];
        active?: boolean;
    }): CreateEventRequest {
        const message = new CreateEventRequest({});
        if (data.title != null) {
            message.title = data.title;
        }
        if (data.description != null) {
            message.description = data.description;
        }
        if (data.start_date != null) {
            message.start_date = data.start_date;
        }
        if (data.end_date != null) {
            message.end_date = data.end_date;
        }
        if (data.location != null) {
            message.location = data.location;
        }
        if (data.organizer != null) {
            message.organizer = data.organizer;
        }
        if (data.attendees != null) {
            message.attendees = data.attendees;
        }
        if (data.active != null) {
            message.active = data.active;
        }
        return message;
    }
    toObject() {
        const data: {
            title?: string;
            description?: string;
            start_date?: string;
            end_date?: string;
            location?: string;
            organizer?: string;
            attendees?: string[];
            active?: boolean;
        } = {};
        if (this.title != null) {
            data.title = this.title;
        }
        if (this.description != null) {
            data.description = this.description;
        }
        if (this.start_date != null) {
            data.start_date = this.start_date;
        }
        if (this.end_date != null) {
            data.end_date = this.end_date;
        }
        if (this.location != null) {
            data.location = this.location;
        }
        if (this.organizer != null) {
            data.organizer = this.organizer;
        }
        if (this.attendees != null) {
            data.attendees = this.attendees;
        }
        if (this.active != null) {
            data.active = this.active;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.title.length)
            writer.writeString(1, this.title);
        if (this.description.length)
            writer.writeString(2, this.description);
        if (this.start_date.length)
            writer.writeString(3, this.start_date);
        if (this.end_date.length)
            writer.writeString(4, this.end_date);
        if (this.location.length)
            writer.writeString(5, this.location);
        if (this.organizer.length)
            writer.writeString(6, this.organizer);
        if (this.attendees.length)
            writer.writeRepeatedString(7, this.attendees);
        if (this.active != false)
            writer.writeBool(8, this.active);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateEventRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateEventRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.title = reader.readString();
                    break;
                case 2:
                    message.description = reader.readString();
                    break;
                case 3:
                    message.start_date = reader.readString();
                    break;
                case 4:
                    message.end_date = reader.readString();
                    break;
                case 5:
                    message.location = reader.readString();
                    break;
                case 6:
                    message.organizer = reader.readString();
                    break;
                case 7:
                    pb_1.Message.addToRepeatedField(message, 7, reader.readString());
                    break;
                case 8:
                    message.active = reader.readBool();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): CreateEventRequest {
        return CreateEventRequest.deserialize(bytes);
    }
}
export class CreateEventResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        event?: EventInfo;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("event" in data && data.event != undefined) {
                this.event = data.event;
            }
        }
    }
    get event() {
        return pb_1.Message.getWrapperField(this, EventInfo, 1) as EventInfo;
    }
    set event(value: EventInfo) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get has_event() {
        return pb_1.Message.getField(this, 1) != null;
    }
    static fromObject(data: {
        event?: ReturnType<typeof EventInfo.prototype.toObject>;
    }): CreateEventResponse {
        const message = new CreateEventResponse({});
        if (data.event != null) {
            message.event = EventInfo.fromObject(data.event);
        }
        return message;
    }
    toObject() {
        const data: {
            event?: ReturnType<typeof EventInfo.prototype.toObject>;
        } = {};
        if (this.event != null) {
            data.event = this.event.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_event)
            writer.writeMessage(1, this.event, () => this.event.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateEventResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateEventResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.event, () => message.event = EventInfo.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): CreateEventResponse {
        return CreateEventResponse.deserialize(bytes);
    }
}
export class GetEventRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        id?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        id?: string;
    }): GetEventRequest {
        const message = new GetEventRequest({});
        if (data.id != null) {
            message.id = data.id;
        }
        return message;
    }
    toObject() {
        const data: {
            id?: string;
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id.length)
            writer.writeString(1, this.id);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetEventRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetEventRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): GetEventRequest {
        return GetEventRequest.deserialize(bytes);
    }
}
export class GetEventResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        event?: EventInfo;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("event" in data && data.event != undefined) {
                this.event = data.event;
            }
        }
    }
    get event() {
        return pb_1.Message.getWrapperField(this, EventInfo, 1) as EventInfo;
    }
    set event(value: EventInfo) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get has_event() {
        return pb_1.Message.getField(this, 1) != null;
    }
    static fromObject(data: {
        event?: ReturnType<typeof EventInfo.prototype.toObject>;
    }): GetEventResponse {
        const message = new GetEventResponse({});
        if (data.event != null) {
            message.event = EventInfo.fromObject(data.event);
        }
        return message;
    }
    toObject() {
        const data: {
            event?: ReturnType<typeof EventInfo.prototype.toObject>;
        } = {};
        if (this.event != null) {
            data.event = this.event.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_event)
            writer.writeMessage(1, this.event, () => this.event.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetEventResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetEventResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.event, () => message.event = EventInfo.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): GetEventResponse {
        return GetEventResponse.deserialize(bytes);
    }
}
export class CancelEventRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        id?: string;
        user_id?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("user_id" in data && data.user_id != undefined) {
                this.user_id = data.user_id;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get user_id() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set user_id(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        id?: string;
        user_id?: string;
    }): CancelEventRequest {
        const message = new CancelEventRequest({});
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.user_id != null) {
            message.user_id = data.user_id;
        }
        return message;
    }
    toObject() {
        const data: {
            id?: string;
            user_id?: string;
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.user_id != null) {
            data.user_id = this.user_id;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id.length)
            writer.writeString(1, this.id);
        if (this.user_id.length)
            writer.writeString(2, this.user_id);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CancelEventRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CancelEventRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readString();
                    break;
                case 2:
                    message.user_id = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): CancelEventRequest {
        return CancelEventRequest.deserialize(bytes);
    }
}
export class CancelEventResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        success?: boolean;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("success" in data && data.success != undefined) {
                this.success = data.success;
            }
        }
    }
    get success() {
        return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
    }
    set success(value: boolean) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        success?: boolean;
    }): CancelEventResponse {
        const message = new CancelEventResponse({});
        if (data.success != null) {
            message.success = data.success;
        }
        return message;
    }
    toObject() {
        const data: {
            success?: boolean;
        } = {};
        if (this.success != null) {
            data.success = this.success;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.success != false)
            writer.writeBool(1, this.success);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CancelEventResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CancelEventResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.success = reader.readBool();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): CancelEventResponse {
        return CancelEventResponse.deserialize(bytes);
    }
}
export class UpdateEventRequest extends pb_1.Message {
    #one_of_decls: number[][] = [[2], [3], [4], [5], [6], [7], [9]];
    constructor(data?: any[] | ({
        id?: string;
        user_id?: string;
    } & (({
        title?: string;
    }) | ({
        description?: string;
    }) | ({
        start_date?: string;
    }) | ({
        end_date?: string;
    }) | ({
        location?: string;
    }) | ({
        organizer?: string;
    }) | ({
        active?: boolean;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("title" in data && data.title != undefined) {
                this.title = data.title;
            }
            if ("description" in data && data.description != undefined) {
                this.description = data.description;
            }
            if ("start_date" in data && data.start_date != undefined) {
                this.start_date = data.start_date;
            }
            if ("end_date" in data && data.end_date != undefined) {
                this.end_date = data.end_date;
            }
            if ("location" in data && data.location != undefined) {
                this.location = data.location;
            }
            if ("organizer" in data && data.organizer != undefined) {
                this.organizer = data.organizer;
            }
            if ("active" in data && data.active != undefined) {
                this.active = data.active;
            }
            if ("user_id" in data && data.user_id != undefined) {
                this.user_id = data.user_id;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get title() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set title(value: string) {
        pb_1.Message.setOneofField(this, 2, this.#one_of_decls[0], value);
    }
    get has_title() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get description() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set description(value: string) {
        pb_1.Message.setOneofField(this, 3, this.#one_of_decls[1], value);
    }
    get has_description() {
        return pb_1.Message.getField(this, 3) != null;
    }
    get start_date() {
        return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
    }
    set start_date(value: string) {
        pb_1.Message.setOneofField(this, 4, this.#one_of_decls[2], value);
    }
    get has_start_date() {
        return pb_1.Message.getField(this, 4) != null;
    }
    get end_date() {
        return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
    }
    set end_date(value: string) {
        pb_1.Message.setOneofField(this, 5, this.#one_of_decls[3], value);
    }
    get has_end_date() {
        return pb_1.Message.getField(this, 5) != null;
    }
    get location() {
        return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
    }
    set location(value: string) {
        pb_1.Message.setOneofField(this, 6, this.#one_of_decls[4], value);
    }
    get has_location() {
        return pb_1.Message.getField(this, 6) != null;
    }
    get organizer() {
        return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
    }
    set organizer(value: string) {
        pb_1.Message.setOneofField(this, 7, this.#one_of_decls[5], value);
    }
    get has_organizer() {
        return pb_1.Message.getField(this, 7) != null;
    }
    get active() {
        return pb_1.Message.getFieldWithDefault(this, 9, false) as boolean;
    }
    set active(value: boolean) {
        pb_1.Message.setOneofField(this, 9, this.#one_of_decls[6], value);
    }
    get has_active() {
        return pb_1.Message.getField(this, 9) != null;
    }
    get user_id() {
        return pb_1.Message.getFieldWithDefault(this, 10, "") as string;
    }
    set user_id(value: string) {
        pb_1.Message.setField(this, 10, value);
    }
    get _title() {
        const cases: {
            [index: number]: "none" | "title";
        } = {
            0: "none",
            2: "title"
        };
        return cases[pb_1.Message.computeOneofCase(this, [2])];
    }
    get _description() {
        const cases: {
            [index: number]: "none" | "description";
        } = {
            0: "none",
            3: "description"
        };
        return cases[pb_1.Message.computeOneofCase(this, [3])];
    }
    get _start_date() {
        const cases: {
            [index: number]: "none" | "start_date";
        } = {
            0: "none",
            4: "start_date"
        };
        return cases[pb_1.Message.computeOneofCase(this, [4])];
    }
    get _end_date() {
        const cases: {
            [index: number]: "none" | "end_date";
        } = {
            0: "none",
            5: "end_date"
        };
        return cases[pb_1.Message.computeOneofCase(this, [5])];
    }
    get _location() {
        const cases: {
            [index: number]: "none" | "location";
        } = {
            0: "none",
            6: "location"
        };
        return cases[pb_1.Message.computeOneofCase(this, [6])];
    }
    get _organizer() {
        const cases: {
            [index: number]: "none" | "organizer";
        } = {
            0: "none",
            7: "organizer"
        };
        return cases[pb_1.Message.computeOneofCase(this, [7])];
    }
    get _active() {
        const cases: {
            [index: number]: "none" | "active";
        } = {
            0: "none",
            9: "active"
        };
        return cases[pb_1.Message.computeOneofCase(this, [9])];
    }
    static fromObject(data: {
        id?: string;
        title?: string;
        description?: string;
        start_date?: string;
        end_date?: string;
        location?: string;
        organizer?: string;
        active?: boolean;
        user_id?: string;
    }): UpdateEventRequest {
        const message = new UpdateEventRequest({});
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.title != null) {
            message.title = data.title;
        }
        if (data.description != null) {
            message.description = data.description;
        }
        if (data.start_date != null) {
            message.start_date = data.start_date;
        }
        if (data.end_date != null) {
            message.end_date = data.end_date;
        }
        if (data.location != null) {
            message.location = data.location;
        }
        if (data.organizer != null) {
            message.organizer = data.organizer;
        }
        if (data.active != null) {
            message.active = data.active;
        }
        if (data.user_id != null) {
            message.user_id = data.user_id;
        }
        return message;
    }
    toObject() {
        const data: {
            id?: string;
            title?: string;
            description?: string;
            start_date?: string;
            end_date?: string;
            location?: string;
            organizer?: string;
            active?: boolean;
            user_id?: string;
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.title != null) {
            data.title = this.title;
        }
        if (this.description != null) {
            data.description = this.description;
        }
        if (this.start_date != null) {
            data.start_date = this.start_date;
        }
        if (this.end_date != null) {
            data.end_date = this.end_date;
        }
        if (this.location != null) {
            data.location = this.location;
        }
        if (this.organizer != null) {
            data.organizer = this.organizer;
        }
        if (this.active != null) {
            data.active = this.active;
        }
        if (this.user_id != null) {
            data.user_id = this.user_id;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id.length)
            writer.writeString(1, this.id);
        if (this.has_title)
            writer.writeString(2, this.title);
        if (this.has_description)
            writer.writeString(3, this.description);
        if (this.has_start_date)
            writer.writeString(4, this.start_date);
        if (this.has_end_date)
            writer.writeString(5, this.end_date);
        if (this.has_location)
            writer.writeString(6, this.location);
        if (this.has_organizer)
            writer.writeString(7, this.organizer);
        if (this.has_active)
            writer.writeBool(9, this.active);
        if (this.user_id.length)
            writer.writeString(10, this.user_id);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateEventRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateEventRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readString();
                    break;
                case 2:
                    message.title = reader.readString();
                    break;
                case 3:
                    message.description = reader.readString();
                    break;
                case 4:
                    message.start_date = reader.readString();
                    break;
                case 5:
                    message.end_date = reader.readString();
                    break;
                case 6:
                    message.location = reader.readString();
                    break;
                case 7:
                    message.organizer = reader.readString();
                    break;
                case 9:
                    message.active = reader.readBool();
                    break;
                case 10:
                    message.user_id = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): UpdateEventRequest {
        return UpdateEventRequest.deserialize(bytes);
    }
}
export class UpdateEventResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        success?: boolean;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("success" in data && data.success != undefined) {
                this.success = data.success;
            }
        }
    }
    get success() {
        return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
    }
    set success(value: boolean) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        success?: boolean;
    }): UpdateEventResponse {
        const message = new UpdateEventResponse({});
        if (data.success != null) {
            message.success = data.success;
        }
        return message;
    }
    toObject() {
        const data: {
            success?: boolean;
        } = {};
        if (this.success != null) {
            data.success = this.success;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.success != false)
            writer.writeBool(1, this.success);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateEventResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateEventResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.success = reader.readBool();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): UpdateEventResponse {
        return UpdateEventResponse.deserialize(bytes);
    }
}
export class AddAttendeeRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        event_id?: string;
        user_id?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("event_id" in data && data.event_id != undefined) {
                this.event_id = data.event_id;
            }
            if ("user_id" in data && data.user_id != undefined) {
                this.user_id = data.user_id;
            }
        }
    }
    get event_id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set event_id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get user_id() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set user_id(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        event_id?: string;
        user_id?: string;
    }): AddAttendeeRequest {
        const message = new AddAttendeeRequest({});
        if (data.event_id != null) {
            message.event_id = data.event_id;
        }
        if (data.user_id != null) {
            message.user_id = data.user_id;
        }
        return message;
    }
    toObject() {
        const data: {
            event_id?: string;
            user_id?: string;
        } = {};
        if (this.event_id != null) {
            data.event_id = this.event_id;
        }
        if (this.user_id != null) {
            data.user_id = this.user_id;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.event_id.length)
            writer.writeString(1, this.event_id);
        if (this.user_id.length)
            writer.writeString(2, this.user_id);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AddAttendeeRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AddAttendeeRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.event_id = reader.readString();
                    break;
                case 2:
                    message.user_id = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): AddAttendeeRequest {
        return AddAttendeeRequest.deserialize(bytes);
    }
}
export class AddAttendeeResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        success?: boolean;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("success" in data && data.success != undefined) {
                this.success = data.success;
            }
        }
    }
    get success() {
        return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
    }
    set success(value: boolean) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        success?: boolean;
    }): AddAttendeeResponse {
        const message = new AddAttendeeResponse({});
        if (data.success != null) {
            message.success = data.success;
        }
        return message;
    }
    toObject() {
        const data: {
            success?: boolean;
        } = {};
        if (this.success != null) {
            data.success = this.success;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.success != false)
            writer.writeBool(1, this.success);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AddAttendeeResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AddAttendeeResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.success = reader.readBool();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): AddAttendeeResponse {
        return AddAttendeeResponse.deserialize(bytes);
    }
}
export class RemoveAttendeeRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        event_id?: string;
        user_id?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("event_id" in data && data.event_id != undefined) {
                this.event_id = data.event_id;
            }
            if ("user_id" in data && data.user_id != undefined) {
                this.user_id = data.user_id;
            }
        }
    }
    get event_id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set event_id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get user_id() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set user_id(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        event_id?: string;
        user_id?: string;
    }): RemoveAttendeeRequest {
        const message = new RemoveAttendeeRequest({});
        if (data.event_id != null) {
            message.event_id = data.event_id;
        }
        if (data.user_id != null) {
            message.user_id = data.user_id;
        }
        return message;
    }
    toObject() {
        const data: {
            event_id?: string;
            user_id?: string;
        } = {};
        if (this.event_id != null) {
            data.event_id = this.event_id;
        }
        if (this.user_id != null) {
            data.user_id = this.user_id;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.event_id.length)
            writer.writeString(1, this.event_id);
        if (this.user_id.length)
            writer.writeString(2, this.user_id);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RemoveAttendeeRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RemoveAttendeeRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.event_id = reader.readString();
                    break;
                case 2:
                    message.user_id = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): RemoveAttendeeRequest {
        return RemoveAttendeeRequest.deserialize(bytes);
    }
}
export class RemoveAttendeeResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        success?: boolean;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("success" in data && data.success != undefined) {
                this.success = data.success;
            }
        }
    }
    get success() {
        return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
    }
    set success(value: boolean) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        success?: boolean;
    }): RemoveAttendeeResponse {
        const message = new RemoveAttendeeResponse({});
        if (data.success != null) {
            message.success = data.success;
        }
        return message;
    }
    toObject() {
        const data: {
            success?: boolean;
        } = {};
        if (this.success != null) {
            data.success = this.success;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.success != false)
            writer.writeBool(1, this.success);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RemoveAttendeeResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RemoveAttendeeResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.success = reader.readBool();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): RemoveAttendeeResponse {
        return RemoveAttendeeResponse.deserialize(bytes);
    }
}
export class CheckAttendeeRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        event_id?: string;
        user_id?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("event_id" in data && data.event_id != undefined) {
                this.event_id = data.event_id;
            }
            if ("user_id" in data && data.user_id != undefined) {
                this.user_id = data.user_id;
            }
        }
    }
    get event_id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set event_id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get user_id() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set user_id(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        event_id?: string;
        user_id?: string;
    }): CheckAttendeeRequest {
        const message = new CheckAttendeeRequest({});
        if (data.event_id != null) {
            message.event_id = data.event_id;
        }
        if (data.user_id != null) {
            message.user_id = data.user_id;
        }
        return message;
    }
    toObject() {
        const data: {
            event_id?: string;
            user_id?: string;
        } = {};
        if (this.event_id != null) {
            data.event_id = this.event_id;
        }
        if (this.user_id != null) {
            data.user_id = this.user_id;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.event_id.length)
            writer.writeString(1, this.event_id);
        if (this.user_id.length)
            writer.writeString(2, this.user_id);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CheckAttendeeRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CheckAttendeeRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.event_id = reader.readString();
                    break;
                case 2:
                    message.user_id = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): CheckAttendeeRequest {
        return CheckAttendeeRequest.deserialize(bytes);
    }
}
export class CheckAttendeeResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        success?: boolean;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("success" in data && data.success != undefined) {
                this.success = data.success;
            }
        }
    }
    get success() {
        return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
    }
    set success(value: boolean) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        success?: boolean;
    }): CheckAttendeeResponse {
        const message = new CheckAttendeeResponse({});
        if (data.success != null) {
            message.success = data.success;
        }
        return message;
    }
    toObject() {
        const data: {
            success?: boolean;
        } = {};
        if (this.success != null) {
            data.success = this.success;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.success != false)
            writer.writeBool(1, this.success);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CheckAttendeeResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CheckAttendeeResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.success = reader.readBool();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): CheckAttendeeResponse {
        return CheckAttendeeResponse.deserialize(bytes);
    }
}
interface GrpcUnaryServiceInterface<P, R> {
    (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
}
interface GrpcStreamServiceInterface<P, R> {
    (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
}
interface GrpWritableServiceInterface<P, R> {
    (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
}
interface GrpcChunkServiceInterface<P, R> {
    (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
}
interface GrpcPromiseServiceInterface<P, R> {
    (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
    (message: P, options?: grpc_1.CallOptions): Promise<R>;
}
export abstract class UnimplementedEventServiceService {
    static definition = {
        CreateEvent: {
            path: "/EventService/CreateEvent",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: CreateEventRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => CreateEventRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: CreateEventResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => CreateEventResponse.deserialize(new Uint8Array(bytes))
        },
        GetEvent: {
            path: "/EventService/GetEvent",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: GetEventRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => GetEventRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: GetEventResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => GetEventResponse.deserialize(new Uint8Array(bytes))
        },
        CancelEvent: {
            path: "/EventService/CancelEvent",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: CancelEventRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => CancelEventRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: CancelEventResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => CancelEventResponse.deserialize(new Uint8Array(bytes))
        },
        UpdateEvent: {
            path: "/EventService/UpdateEvent",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: UpdateEventRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => UpdateEventRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: UpdateEventResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => UpdateEventResponse.deserialize(new Uint8Array(bytes))
        },
        AddAttendee: {
            path: "/EventService/AddAttendee",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: AddAttendeeRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => AddAttendeeRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: AddAttendeeResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => AddAttendeeResponse.deserialize(new Uint8Array(bytes))
        },
        RemoveAttendee: {
            path: "/EventService/RemoveAttendee",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: RemoveAttendeeRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => RemoveAttendeeRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: RemoveAttendeeResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => RemoveAttendeeResponse.deserialize(new Uint8Array(bytes))
        },
        CheckAttendee: {
            path: "/EventService/CheckAttendee",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: CheckAttendeeRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => CheckAttendeeRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: CheckAttendeeResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => CheckAttendeeResponse.deserialize(new Uint8Array(bytes))
        }
    };
    [method: string]: grpc_1.UntypedHandleCall;
    abstract CreateEvent(call: grpc_1.ServerUnaryCall<CreateEventRequest, CreateEventResponse>, callback: grpc_1.sendUnaryData<CreateEventResponse>): void;
    abstract GetEvent(call: grpc_1.ServerUnaryCall<GetEventRequest, GetEventResponse>, callback: grpc_1.sendUnaryData<GetEventResponse>): void;
    abstract CancelEvent(call: grpc_1.ServerUnaryCall<CancelEventRequest, CancelEventResponse>, callback: grpc_1.sendUnaryData<CancelEventResponse>): void;
    abstract UpdateEvent(call: grpc_1.ServerUnaryCall<UpdateEventRequest, UpdateEventResponse>, callback: grpc_1.sendUnaryData<UpdateEventResponse>): void;
    abstract AddAttendee(call: grpc_1.ServerUnaryCall<AddAttendeeRequest, AddAttendeeResponse>, callback: grpc_1.sendUnaryData<AddAttendeeResponse>): void;
    abstract RemoveAttendee(call: grpc_1.ServerUnaryCall<RemoveAttendeeRequest, RemoveAttendeeResponse>, callback: grpc_1.sendUnaryData<RemoveAttendeeResponse>): void;
    abstract CheckAttendee(call: grpc_1.ServerUnaryCall<CheckAttendeeRequest, CheckAttendeeResponse>, callback: grpc_1.sendUnaryData<CheckAttendeeResponse>): void;
}
export class EventServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedEventServiceService.definition, "EventService", {}) {
    constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
        super(address, credentials, options);
    }
    CreateEvent: GrpcUnaryServiceInterface<CreateEventRequest, CreateEventResponse> = (message: CreateEventRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<CreateEventResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<CreateEventResponse>, callback?: grpc_1.requestCallback<CreateEventResponse>): grpc_1.ClientUnaryCall => {
        return super.CreateEvent(message, metadata, options, callback);
    };
    GetEvent: GrpcUnaryServiceInterface<GetEventRequest, GetEventResponse> = (message: GetEventRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetEventResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetEventResponse>, callback?: grpc_1.requestCallback<GetEventResponse>): grpc_1.ClientUnaryCall => {
        return super.GetEvent(message, metadata, options, callback);
    };
    CancelEvent: GrpcUnaryServiceInterface<CancelEventRequest, CancelEventResponse> = (message: CancelEventRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<CancelEventResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<CancelEventResponse>, callback?: grpc_1.requestCallback<CancelEventResponse>): grpc_1.ClientUnaryCall => {
        return super.CancelEvent(message, metadata, options, callback);
    };
    UpdateEvent: GrpcUnaryServiceInterface<UpdateEventRequest, UpdateEventResponse> = (message: UpdateEventRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<UpdateEventResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<UpdateEventResponse>, callback?: grpc_1.requestCallback<UpdateEventResponse>): grpc_1.ClientUnaryCall => {
        return super.UpdateEvent(message, metadata, options, callback);
    };
    AddAttendee: GrpcUnaryServiceInterface<AddAttendeeRequest, AddAttendeeResponse> = (message: AddAttendeeRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<AddAttendeeResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<AddAttendeeResponse>, callback?: grpc_1.requestCallback<AddAttendeeResponse>): grpc_1.ClientUnaryCall => {
        return super.AddAttendee(message, metadata, options, callback);
    };
    RemoveAttendee: GrpcUnaryServiceInterface<RemoveAttendeeRequest, RemoveAttendeeResponse> = (message: RemoveAttendeeRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<RemoveAttendeeResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<RemoveAttendeeResponse>, callback?: grpc_1.requestCallback<RemoveAttendeeResponse>): grpc_1.ClientUnaryCall => {
        return super.RemoveAttendee(message, metadata, options, callback);
    };
    CheckAttendee: GrpcUnaryServiceInterface<CheckAttendeeRequest, CheckAttendeeResponse> = (message: CheckAttendeeRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<CheckAttendeeResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<CheckAttendeeResponse>, callback?: grpc_1.requestCallback<CheckAttendeeResponse>): grpc_1.ClientUnaryCall => {
        return super.CheckAttendee(message, metadata, options, callback);
    };
}
