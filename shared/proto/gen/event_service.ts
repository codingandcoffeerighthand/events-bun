// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.4
//   protoc               v5.27.1
// source: event_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";

export const protobufPackage = "";

export interface EventInfo {
  id: string;
  title: string;
  description: string;
  startDate: string;
  endDate: string;
  location: string;
  organizer: string;
  attendees: string[];
  active: boolean;
}

export interface CreateEventRequest {
  title: string;
  description: string;
  startDate: string;
  endDate: string;
  location: string;
  organizer: string;
  attendees: string[];
  active: boolean;
}

export interface CreateEventResponse {
  event: EventInfo | undefined;
}

export interface GetEventRequest {
  id: string;
}

export interface GetEventResponse {
  event: EventInfo | undefined;
}

export interface CancelEventRequest {
  id: string;
  userId: string;
}

export interface CancelEventResponse {
  success: boolean;
}

export interface UpdateEventRequest {
  id: string;
  title?: string | undefined;
  description?: string | undefined;
  startDate?: string | undefined;
  endDate?: string | undefined;
  location?: string | undefined;
  organizer?: string | undefined;
  active?: boolean | undefined;
  userId: string;
}

export interface UpdateEventResponse {
  success: boolean;
}

export interface AddAttendeeRequest {
  eventId: string;
  userId: string;
}

export interface AddAttendeeResponse {
  success: boolean;
}

export interface RemoveAttendeeRequest {
  eventId: string;
  userId: string;
}

export interface RemoveAttendeeResponse {
  success: boolean;
}

export interface CheckAttendeeRequest {
  eventId: string;
  userId: string;
}

export interface CheckAttendeeResponse {
  success: boolean;
}

function createBaseEventInfo(): EventInfo {
  return {
    id: "",
    title: "",
    description: "",
    startDate: "",
    endDate: "",
    location: "",
    organizer: "",
    attendees: [],
    active: false,
  };
}

export const EventInfo: MessageFns<EventInfo> = {
  encode(message: EventInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.title !== "") {
      writer.uint32(18).string(message.title);
    }
    if (message.description !== "") {
      writer.uint32(26).string(message.description);
    }
    if (message.startDate !== "") {
      writer.uint32(34).string(message.startDate);
    }
    if (message.endDate !== "") {
      writer.uint32(42).string(message.endDate);
    }
    if (message.location !== "") {
      writer.uint32(50).string(message.location);
    }
    if (message.organizer !== "") {
      writer.uint32(58).string(message.organizer);
    }
    for (const v of message.attendees) {
      writer.uint32(66).string(v!);
    }
    if (message.active !== false) {
      writer.uint32(72).bool(message.active);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.startDate = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.endDate = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.location = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.organizer = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.attendees.push(reader.string());
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.active = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventInfo {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      startDate: isSet(object.startDate) ? globalThis.String(object.startDate) : "",
      endDate: isSet(object.endDate) ? globalThis.String(object.endDate) : "",
      location: isSet(object.location) ? globalThis.String(object.location) : "",
      organizer: isSet(object.organizer) ? globalThis.String(object.organizer) : "",
      attendees: globalThis.Array.isArray(object?.attendees)
        ? object.attendees.map((e: any) => globalThis.String(e))
        : [],
      active: isSet(object.active) ? globalThis.Boolean(object.active) : false,
    };
  },

  toJSON(message: EventInfo): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.startDate !== "") {
      obj.startDate = message.startDate;
    }
    if (message.endDate !== "") {
      obj.endDate = message.endDate;
    }
    if (message.location !== "") {
      obj.location = message.location;
    }
    if (message.organizer !== "") {
      obj.organizer = message.organizer;
    }
    if (message.attendees?.length) {
      obj.attendees = message.attendees;
    }
    if (message.active !== false) {
      obj.active = message.active;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventInfo>, I>>(base?: I): EventInfo {
    return EventInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventInfo>, I>>(object: I): EventInfo {
    const message = createBaseEventInfo();
    message.id = object.id ?? "";
    message.title = object.title ?? "";
    message.description = object.description ?? "";
    message.startDate = object.startDate ?? "";
    message.endDate = object.endDate ?? "";
    message.location = object.location ?? "";
    message.organizer = object.organizer ?? "";
    message.attendees = object.attendees?.map((e) => e) || [];
    message.active = object.active ?? false;
    return message;
  },
};

function createBaseCreateEventRequest(): CreateEventRequest {
  return {
    title: "",
    description: "",
    startDate: "",
    endDate: "",
    location: "",
    organizer: "",
    attendees: [],
    active: false,
  };
}

export const CreateEventRequest: MessageFns<CreateEventRequest> = {
  encode(message: CreateEventRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.title !== "") {
      writer.uint32(10).string(message.title);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    if (message.startDate !== "") {
      writer.uint32(26).string(message.startDate);
    }
    if (message.endDate !== "") {
      writer.uint32(34).string(message.endDate);
    }
    if (message.location !== "") {
      writer.uint32(42).string(message.location);
    }
    if (message.organizer !== "") {
      writer.uint32(50).string(message.organizer);
    }
    for (const v of message.attendees) {
      writer.uint32(58).string(v!);
    }
    if (message.active !== false) {
      writer.uint32(64).bool(message.active);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateEventRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateEventRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.startDate = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.endDate = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.location = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.organizer = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.attendees.push(reader.string());
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.active = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateEventRequest {
    return {
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      startDate: isSet(object.startDate) ? globalThis.String(object.startDate) : "",
      endDate: isSet(object.endDate) ? globalThis.String(object.endDate) : "",
      location: isSet(object.location) ? globalThis.String(object.location) : "",
      organizer: isSet(object.organizer) ? globalThis.String(object.organizer) : "",
      attendees: globalThis.Array.isArray(object?.attendees)
        ? object.attendees.map((e: any) => globalThis.String(e))
        : [],
      active: isSet(object.active) ? globalThis.Boolean(object.active) : false,
    };
  },

  toJSON(message: CreateEventRequest): unknown {
    const obj: any = {};
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.startDate !== "") {
      obj.startDate = message.startDate;
    }
    if (message.endDate !== "") {
      obj.endDate = message.endDate;
    }
    if (message.location !== "") {
      obj.location = message.location;
    }
    if (message.organizer !== "") {
      obj.organizer = message.organizer;
    }
    if (message.attendees?.length) {
      obj.attendees = message.attendees;
    }
    if (message.active !== false) {
      obj.active = message.active;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateEventRequest>, I>>(base?: I): CreateEventRequest {
    return CreateEventRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateEventRequest>, I>>(object: I): CreateEventRequest {
    const message = createBaseCreateEventRequest();
    message.title = object.title ?? "";
    message.description = object.description ?? "";
    message.startDate = object.startDate ?? "";
    message.endDate = object.endDate ?? "";
    message.location = object.location ?? "";
    message.organizer = object.organizer ?? "";
    message.attendees = object.attendees?.map((e) => e) || [];
    message.active = object.active ?? false;
    return message;
  },
};

function createBaseCreateEventResponse(): CreateEventResponse {
  return { event: undefined };
}

export const CreateEventResponse: MessageFns<CreateEventResponse> = {
  encode(message: CreateEventResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.event !== undefined) {
      EventInfo.encode(message.event, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateEventResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateEventResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.event = EventInfo.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateEventResponse {
    return { event: isSet(object.event) ? EventInfo.fromJSON(object.event) : undefined };
  },

  toJSON(message: CreateEventResponse): unknown {
    const obj: any = {};
    if (message.event !== undefined) {
      obj.event = EventInfo.toJSON(message.event);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateEventResponse>, I>>(base?: I): CreateEventResponse {
    return CreateEventResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateEventResponse>, I>>(object: I): CreateEventResponse {
    const message = createBaseCreateEventResponse();
    message.event = (object.event !== undefined && object.event !== null)
      ? EventInfo.fromPartial(object.event)
      : undefined;
    return message;
  },
};

function createBaseGetEventRequest(): GetEventRequest {
  return { id: "" };
}

export const GetEventRequest: MessageFns<GetEventRequest> = {
  encode(message: GetEventRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetEventRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetEventRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetEventRequest {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: GetEventRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetEventRequest>, I>>(base?: I): GetEventRequest {
    return GetEventRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetEventRequest>, I>>(object: I): GetEventRequest {
    const message = createBaseGetEventRequest();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseGetEventResponse(): GetEventResponse {
  return { event: undefined };
}

export const GetEventResponse: MessageFns<GetEventResponse> = {
  encode(message: GetEventResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.event !== undefined) {
      EventInfo.encode(message.event, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetEventResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetEventResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.event = EventInfo.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetEventResponse {
    return { event: isSet(object.event) ? EventInfo.fromJSON(object.event) : undefined };
  },

  toJSON(message: GetEventResponse): unknown {
    const obj: any = {};
    if (message.event !== undefined) {
      obj.event = EventInfo.toJSON(message.event);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetEventResponse>, I>>(base?: I): GetEventResponse {
    return GetEventResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetEventResponse>, I>>(object: I): GetEventResponse {
    const message = createBaseGetEventResponse();
    message.event = (object.event !== undefined && object.event !== null)
      ? EventInfo.fromPartial(object.event)
      : undefined;
    return message;
  },
};

function createBaseCancelEventRequest(): CancelEventRequest {
  return { id: "", userId: "" };
}

export const CancelEventRequest: MessageFns<CancelEventRequest> = {
  encode(message: CancelEventRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.userId !== "") {
      writer.uint32(18).string(message.userId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CancelEventRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCancelEventRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CancelEventRequest {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
    };
  },

  toJSON(message: CancelEventRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CancelEventRequest>, I>>(base?: I): CancelEventRequest {
    return CancelEventRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CancelEventRequest>, I>>(object: I): CancelEventRequest {
    const message = createBaseCancelEventRequest();
    message.id = object.id ?? "";
    message.userId = object.userId ?? "";
    return message;
  },
};

function createBaseCancelEventResponse(): CancelEventResponse {
  return { success: false };
}

export const CancelEventResponse: MessageFns<CancelEventResponse> = {
  encode(message: CancelEventResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CancelEventResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCancelEventResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CancelEventResponse {
    return { success: isSet(object.success) ? globalThis.Boolean(object.success) : false };
  },

  toJSON(message: CancelEventResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CancelEventResponse>, I>>(base?: I): CancelEventResponse {
    return CancelEventResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CancelEventResponse>, I>>(object: I): CancelEventResponse {
    const message = createBaseCancelEventResponse();
    message.success = object.success ?? false;
    return message;
  },
};

function createBaseUpdateEventRequest(): UpdateEventRequest {
  return {
    id: "",
    title: undefined,
    description: undefined,
    startDate: undefined,
    endDate: undefined,
    location: undefined,
    organizer: undefined,
    active: undefined,
    userId: "",
  };
}

export const UpdateEventRequest: MessageFns<UpdateEventRequest> = {
  encode(message: UpdateEventRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.title !== undefined) {
      writer.uint32(18).string(message.title);
    }
    if (message.description !== undefined) {
      writer.uint32(26).string(message.description);
    }
    if (message.startDate !== undefined) {
      writer.uint32(34).string(message.startDate);
    }
    if (message.endDate !== undefined) {
      writer.uint32(42).string(message.endDate);
    }
    if (message.location !== undefined) {
      writer.uint32(50).string(message.location);
    }
    if (message.organizer !== undefined) {
      writer.uint32(58).string(message.organizer);
    }
    if (message.active !== undefined) {
      writer.uint32(72).bool(message.active);
    }
    if (message.userId !== "") {
      writer.uint32(82).string(message.userId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateEventRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateEventRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.startDate = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.endDate = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.location = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.organizer = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.active = reader.bool();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateEventRequest {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      title: isSet(object.title) ? globalThis.String(object.title) : undefined,
      description: isSet(object.description) ? globalThis.String(object.description) : undefined,
      startDate: isSet(object.startDate) ? globalThis.String(object.startDate) : undefined,
      endDate: isSet(object.endDate) ? globalThis.String(object.endDate) : undefined,
      location: isSet(object.location) ? globalThis.String(object.location) : undefined,
      organizer: isSet(object.organizer) ? globalThis.String(object.organizer) : undefined,
      active: isSet(object.active) ? globalThis.Boolean(object.active) : undefined,
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
    };
  },

  toJSON(message: UpdateEventRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.title !== undefined) {
      obj.title = message.title;
    }
    if (message.description !== undefined) {
      obj.description = message.description;
    }
    if (message.startDate !== undefined) {
      obj.startDate = message.startDate;
    }
    if (message.endDate !== undefined) {
      obj.endDate = message.endDate;
    }
    if (message.location !== undefined) {
      obj.location = message.location;
    }
    if (message.organizer !== undefined) {
      obj.organizer = message.organizer;
    }
    if (message.active !== undefined) {
      obj.active = message.active;
    }
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateEventRequest>, I>>(base?: I): UpdateEventRequest {
    return UpdateEventRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateEventRequest>, I>>(object: I): UpdateEventRequest {
    const message = createBaseUpdateEventRequest();
    message.id = object.id ?? "";
    message.title = object.title ?? undefined;
    message.description = object.description ?? undefined;
    message.startDate = object.startDate ?? undefined;
    message.endDate = object.endDate ?? undefined;
    message.location = object.location ?? undefined;
    message.organizer = object.organizer ?? undefined;
    message.active = object.active ?? undefined;
    message.userId = object.userId ?? "";
    return message;
  },
};

function createBaseUpdateEventResponse(): UpdateEventResponse {
  return { success: false };
}

export const UpdateEventResponse: MessageFns<UpdateEventResponse> = {
  encode(message: UpdateEventResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateEventResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateEventResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateEventResponse {
    return { success: isSet(object.success) ? globalThis.Boolean(object.success) : false };
  },

  toJSON(message: UpdateEventResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateEventResponse>, I>>(base?: I): UpdateEventResponse {
    return UpdateEventResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateEventResponse>, I>>(object: I): UpdateEventResponse {
    const message = createBaseUpdateEventResponse();
    message.success = object.success ?? false;
    return message;
  },
};

function createBaseAddAttendeeRequest(): AddAttendeeRequest {
  return { eventId: "", userId: "" };
}

export const AddAttendeeRequest: MessageFns<AddAttendeeRequest> = {
  encode(message: AddAttendeeRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.eventId !== "") {
      writer.uint32(10).string(message.eventId);
    }
    if (message.userId !== "") {
      writer.uint32(18).string(message.userId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddAttendeeRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddAttendeeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.eventId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddAttendeeRequest {
    return {
      eventId: isSet(object.eventId) ? globalThis.String(object.eventId) : "",
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
    };
  },

  toJSON(message: AddAttendeeRequest): unknown {
    const obj: any = {};
    if (message.eventId !== "") {
      obj.eventId = message.eventId;
    }
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddAttendeeRequest>, I>>(base?: I): AddAttendeeRequest {
    return AddAttendeeRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddAttendeeRequest>, I>>(object: I): AddAttendeeRequest {
    const message = createBaseAddAttendeeRequest();
    message.eventId = object.eventId ?? "";
    message.userId = object.userId ?? "";
    return message;
  },
};

function createBaseAddAttendeeResponse(): AddAttendeeResponse {
  return { success: false };
}

export const AddAttendeeResponse: MessageFns<AddAttendeeResponse> = {
  encode(message: AddAttendeeResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddAttendeeResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddAttendeeResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddAttendeeResponse {
    return { success: isSet(object.success) ? globalThis.Boolean(object.success) : false };
  },

  toJSON(message: AddAttendeeResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddAttendeeResponse>, I>>(base?: I): AddAttendeeResponse {
    return AddAttendeeResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddAttendeeResponse>, I>>(object: I): AddAttendeeResponse {
    const message = createBaseAddAttendeeResponse();
    message.success = object.success ?? false;
    return message;
  },
};

function createBaseRemoveAttendeeRequest(): RemoveAttendeeRequest {
  return { eventId: "", userId: "" };
}

export const RemoveAttendeeRequest: MessageFns<RemoveAttendeeRequest> = {
  encode(message: RemoveAttendeeRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.eventId !== "") {
      writer.uint32(10).string(message.eventId);
    }
    if (message.userId !== "") {
      writer.uint32(18).string(message.userId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RemoveAttendeeRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveAttendeeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.eventId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoveAttendeeRequest {
    return {
      eventId: isSet(object.eventId) ? globalThis.String(object.eventId) : "",
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
    };
  },

  toJSON(message: RemoveAttendeeRequest): unknown {
    const obj: any = {};
    if (message.eventId !== "") {
      obj.eventId = message.eventId;
    }
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RemoveAttendeeRequest>, I>>(base?: I): RemoveAttendeeRequest {
    return RemoveAttendeeRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RemoveAttendeeRequest>, I>>(object: I): RemoveAttendeeRequest {
    const message = createBaseRemoveAttendeeRequest();
    message.eventId = object.eventId ?? "";
    message.userId = object.userId ?? "";
    return message;
  },
};

function createBaseRemoveAttendeeResponse(): RemoveAttendeeResponse {
  return { success: false };
}

export const RemoveAttendeeResponse: MessageFns<RemoveAttendeeResponse> = {
  encode(message: RemoveAttendeeResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RemoveAttendeeResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveAttendeeResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoveAttendeeResponse {
    return { success: isSet(object.success) ? globalThis.Boolean(object.success) : false };
  },

  toJSON(message: RemoveAttendeeResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RemoveAttendeeResponse>, I>>(base?: I): RemoveAttendeeResponse {
    return RemoveAttendeeResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RemoveAttendeeResponse>, I>>(object: I): RemoveAttendeeResponse {
    const message = createBaseRemoveAttendeeResponse();
    message.success = object.success ?? false;
    return message;
  },
};

function createBaseCheckAttendeeRequest(): CheckAttendeeRequest {
  return { eventId: "", userId: "" };
}

export const CheckAttendeeRequest: MessageFns<CheckAttendeeRequest> = {
  encode(message: CheckAttendeeRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.eventId !== "") {
      writer.uint32(10).string(message.eventId);
    }
    if (message.userId !== "") {
      writer.uint32(18).string(message.userId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CheckAttendeeRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCheckAttendeeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.eventId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CheckAttendeeRequest {
    return {
      eventId: isSet(object.eventId) ? globalThis.String(object.eventId) : "",
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
    };
  },

  toJSON(message: CheckAttendeeRequest): unknown {
    const obj: any = {};
    if (message.eventId !== "") {
      obj.eventId = message.eventId;
    }
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CheckAttendeeRequest>, I>>(base?: I): CheckAttendeeRequest {
    return CheckAttendeeRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CheckAttendeeRequest>, I>>(object: I): CheckAttendeeRequest {
    const message = createBaseCheckAttendeeRequest();
    message.eventId = object.eventId ?? "";
    message.userId = object.userId ?? "";
    return message;
  },
};

function createBaseCheckAttendeeResponse(): CheckAttendeeResponse {
  return { success: false };
}

export const CheckAttendeeResponse: MessageFns<CheckAttendeeResponse> = {
  encode(message: CheckAttendeeResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CheckAttendeeResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCheckAttendeeResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CheckAttendeeResponse {
    return { success: isSet(object.success) ? globalThis.Boolean(object.success) : false };
  },

  toJSON(message: CheckAttendeeResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CheckAttendeeResponse>, I>>(base?: I): CheckAttendeeResponse {
    return CheckAttendeeResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CheckAttendeeResponse>, I>>(object: I): CheckAttendeeResponse {
    const message = createBaseCheckAttendeeResponse();
    message.success = object.success ?? false;
    return message;
  },
};

export type EventServiceService = typeof EventServiceService;
export const EventServiceService = {
  createEvent: {
    path: "/EventService/CreateEvent",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: CreateEventRequest) => Buffer.from(CreateEventRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => CreateEventRequest.decode(value),
    responseSerialize: (value: CreateEventResponse) => Buffer.from(CreateEventResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => CreateEventResponse.decode(value),
  },
  getEvent: {
    path: "/EventService/GetEvent",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetEventRequest) => Buffer.from(GetEventRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => GetEventRequest.decode(value),
    responseSerialize: (value: GetEventResponse) => Buffer.from(GetEventResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => GetEventResponse.decode(value),
  },
  cancelEvent: {
    path: "/EventService/CancelEvent",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: CancelEventRequest) => Buffer.from(CancelEventRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => CancelEventRequest.decode(value),
    responseSerialize: (value: CancelEventResponse) => Buffer.from(CancelEventResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => CancelEventResponse.decode(value),
  },
  updateEvent: {
    path: "/EventService/UpdateEvent",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: UpdateEventRequest) => Buffer.from(UpdateEventRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => UpdateEventRequest.decode(value),
    responseSerialize: (value: UpdateEventResponse) => Buffer.from(UpdateEventResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => UpdateEventResponse.decode(value),
  },
  addAttendee: {
    path: "/EventService/AddAttendee",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: AddAttendeeRequest) => Buffer.from(AddAttendeeRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => AddAttendeeRequest.decode(value),
    responseSerialize: (value: AddAttendeeResponse) => Buffer.from(AddAttendeeResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => AddAttendeeResponse.decode(value),
  },
  removeAttendee: {
    path: "/EventService/RemoveAttendee",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: RemoveAttendeeRequest) => Buffer.from(RemoveAttendeeRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => RemoveAttendeeRequest.decode(value),
    responseSerialize: (value: RemoveAttendeeResponse) => Buffer.from(RemoveAttendeeResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => RemoveAttendeeResponse.decode(value),
  },
  checkAttendee: {
    path: "/EventService/CheckAttendee",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: CheckAttendeeRequest) => Buffer.from(CheckAttendeeRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => CheckAttendeeRequest.decode(value),
    responseSerialize: (value: CheckAttendeeResponse) => Buffer.from(CheckAttendeeResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => CheckAttendeeResponse.decode(value),
  },
} as const;

export interface EventServiceServer extends UntypedServiceImplementation {
  createEvent: handleUnaryCall<CreateEventRequest, CreateEventResponse>;
  getEvent: handleUnaryCall<GetEventRequest, GetEventResponse>;
  cancelEvent: handleUnaryCall<CancelEventRequest, CancelEventResponse>;
  updateEvent: handleUnaryCall<UpdateEventRequest, UpdateEventResponse>;
  addAttendee: handleUnaryCall<AddAttendeeRequest, AddAttendeeResponse>;
  removeAttendee: handleUnaryCall<RemoveAttendeeRequest, RemoveAttendeeResponse>;
  checkAttendee: handleUnaryCall<CheckAttendeeRequest, CheckAttendeeResponse>;
}

export interface EventServiceClient extends Client {
  createEvent(
    request: CreateEventRequest,
    callback: (error: ServiceError | null, response: CreateEventResponse) => void,
  ): ClientUnaryCall;
  createEvent(
    request: CreateEventRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: CreateEventResponse) => void,
  ): ClientUnaryCall;
  createEvent(
    request: CreateEventRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: CreateEventResponse) => void,
  ): ClientUnaryCall;
  getEvent(
    request: GetEventRequest,
    callback: (error: ServiceError | null, response: GetEventResponse) => void,
  ): ClientUnaryCall;
  getEvent(
    request: GetEventRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetEventResponse) => void,
  ): ClientUnaryCall;
  getEvent(
    request: GetEventRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetEventResponse) => void,
  ): ClientUnaryCall;
  cancelEvent(
    request: CancelEventRequest,
    callback: (error: ServiceError | null, response: CancelEventResponse) => void,
  ): ClientUnaryCall;
  cancelEvent(
    request: CancelEventRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: CancelEventResponse) => void,
  ): ClientUnaryCall;
  cancelEvent(
    request: CancelEventRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: CancelEventResponse) => void,
  ): ClientUnaryCall;
  updateEvent(
    request: UpdateEventRequest,
    callback: (error: ServiceError | null, response: UpdateEventResponse) => void,
  ): ClientUnaryCall;
  updateEvent(
    request: UpdateEventRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: UpdateEventResponse) => void,
  ): ClientUnaryCall;
  updateEvent(
    request: UpdateEventRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: UpdateEventResponse) => void,
  ): ClientUnaryCall;
  addAttendee(
    request: AddAttendeeRequest,
    callback: (error: ServiceError | null, response: AddAttendeeResponse) => void,
  ): ClientUnaryCall;
  addAttendee(
    request: AddAttendeeRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: AddAttendeeResponse) => void,
  ): ClientUnaryCall;
  addAttendee(
    request: AddAttendeeRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: AddAttendeeResponse) => void,
  ): ClientUnaryCall;
  removeAttendee(
    request: RemoveAttendeeRequest,
    callback: (error: ServiceError | null, response: RemoveAttendeeResponse) => void,
  ): ClientUnaryCall;
  removeAttendee(
    request: RemoveAttendeeRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: RemoveAttendeeResponse) => void,
  ): ClientUnaryCall;
  removeAttendee(
    request: RemoveAttendeeRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: RemoveAttendeeResponse) => void,
  ): ClientUnaryCall;
  checkAttendee(
    request: CheckAttendeeRequest,
    callback: (error: ServiceError | null, response: CheckAttendeeResponse) => void,
  ): ClientUnaryCall;
  checkAttendee(
    request: CheckAttendeeRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: CheckAttendeeResponse) => void,
  ): ClientUnaryCall;
  checkAttendee(
    request: CheckAttendeeRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: CheckAttendeeResponse) => void,
  ): ClientUnaryCall;
}

export const EventServiceClient = makeGenericClientConstructor(EventServiceService, "EventService") as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): EventServiceClient;
  service: typeof EventServiceService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
